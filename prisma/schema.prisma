generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model axis {
  id                         Int                          @id @default(autoincrement())
  conference_id              Int
  organizer_profile_id       Int?
  is_voting                  Boolean?                     @default(false)
  title                      String                       @db.VarChar
  conferences                conferences                  @relation(fields: [conference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile                    profile?                     @relation(fields: [organizer_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  presentations              presentations[]
  evaluator_axis_assignments evaluator_axis_assignments[]
}

model circular {
  id            Int         @id @default(autoincrement())
  conference_id Int
  title         String      @db.VarChar
  info          String      @db.VarChar
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  conferences   conferences @relation(fields: [conference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model conferences {
  id                      Int            @id @default(autoincrement())
  title                   String         @db.VarChar
  date                    DateTime       @db.Timestamp(6)
  presentation_limit_date DateTime       @db.Timestamp(6)
  logo_url                String         @db.VarChar
  active                  Boolean?       @default(true)
  created_at              DateTime?      @default(now()) @db.Timestamp(6)
  axis                    axis[]
  circular                circular[]
  profile                 profile[]
  sponsors                sponsors[]
  winner_types            winner_types[]
}

enum State {
  pending
  approved
  approved_with_comments
  rejected
}

model presentations {
  id                                                  Int       @id @default(autoincrement())
  presenter_profile_id                                Int
  evaluator_profile_id                                Int?
  axis_id                                             Int
  url                                                 String    @db.VarChar
  comments                                            String?   @db.VarChar
  state                                               State     @default(pending)
  created_at                                          DateTime? @default(now()) @db.Timestamp(6)
  axis                                                axis      @relation(fields: [axis_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile_presentations_evaluator_profile_idToprofile profile?  @relation("presentations_evaluator_profile_idToprofile", fields: [evaluator_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile_presentations_presenter_profile_idToprofile profile   @relation("presentations_presenter_profile_idToprofile", fields: [presenter_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  votes                                               votes[]
  winners                                             winners[]
}

model profile {
  id                                                        Int                          @id @default(autoincrement())
  user_id                                                   Int
  conference_id                                             Int
  attendance_date                                           DateTime?                    @db.Timestamp(6)
  created_at                                                DateTime?                    @default(now()) @db.Timestamp(6)
  axis                                                      axis[]
  presentations_presentations_evaluator_profile_idToprofile presentations[]              @relation("presentations_evaluator_profile_idToprofile")
  presentations_presentations_presenter_profile_idToprofile presentations[]              @relation("presentations_presenter_profile_idToprofile")
  conferences                                               conferences                  @relation(fields: [conference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                                                     users                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile_roles                                             profile_roles[]
  votes                                                     votes[]
  evaluator_axis_assignments                                evaluator_axis_assignments[]

  @@unique([user_id, conference_id])
}

model profile_roles {
  profile_id Int
  roles_id   Int
  profile    profile @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles      roles   @relation(fields: [roles_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([profile_id, roles_id])
}

model roles {
  id                 Int                  @id @default(autoincrement())
  role               String
  profile_roles      profile_roles[]
  roles_winner_types roles_winner_types[]
}

model roles_winner_types {
  roles_id        Int
  winner_types_id Int
  roles           roles        @relation(fields: [roles_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  winner_types    winner_types @relation(fields: [winner_types_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([roles_id, winner_types_id])
}

model sponsors {
  id            Int         @id @default(autoincrement())
  conference_id Int
  image_url     String      @db.VarChar
  link_site     String      @db.VarChar
  conferences   conferences @relation(fields: [conference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id         Int       @id @default(autoincrement())
  email      String    @unique @db.VarChar
  name       String    @db.VarChar
  lastname   String    @db.VarChar
  phone      String    @db.VarChar
  password   String    @db.VarChar
  image_url  String?   @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  profile    profile[]
}

model votes {
  id               Int           @id @default(autoincrement())
  giver_profile_id Int
  presentation_id  Int
  created_at       DateTime?     @default(now()) @db.Timestamp(6)
  profile          profile       @relation(fields: [giver_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  presentations    presentations @relation(fields: [presentation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model winner_types {
  id                 Int                  @id @default(autoincrement())
  conference_id      Int
  title              String               @db.VarChar
  roles_winner_types roles_winner_types[]
  conferences        conferences          @relation(fields: [conference_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  winners            winners[]
}

model winners {
  id              Int           @id @default(autoincrement())
  presentation_id Int
  winner_type_id  Int
  presentations   presentations @relation(fields: [presentation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  winner_types    winner_types  @relation(fields: [winner_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model evaluator_axis_assignments {
  id         Int     @id @default(autoincrement())
  profile_id Int
  axis_id    Int
  profile    profile @relation(fields: [profile_id], references: [id])
  axis       axis    @relation(fields: [axis_id], references: [id])
}
